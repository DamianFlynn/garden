{
  "garden/content/posts/dont-be-afraid-to-give-up-the-good-to-go-for-the-great": {
    "title": "Don't be afraid to give up the good to go for the great",
    "content": "\nLeverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.\n\nBring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.\n\n\u003e The longer I live, the more I realize that I am never wrong about anything, and that all the pains I have so humbly taken to verify my notions have only wasted my time!\n\nLeverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.\n\nCollaboratively administrate turnkey channels whereas virtual e-tailers. Objectively seize scalable metrics whereas proactive e-services. Seamlessly empower fully researched growth strategies and interoperable internal or ‚Äúorganic‚Äù sources.\n\n![Travel](don't-be-afraid-to-give-up-the-good-to-go-for-the-great/opps-missing-image.png)\n*Photo by [Jesse Callahan](https://via.placeholder.com/1200x800) on [Unsplash](https://via.placeholder.com/1200x800)*\n\nCompletely synergize resource taxing relationships via premier niche markets. Professionally cultivate one-to-one customer service with robust ideas. Dynamically innovate resource-leveling customer service for state of the art customer service.\n\nPhosfluorescently engage worldwide methodologies with web-enabled technology. Interactively coordinate proactive e-commerce via process-centric ‚Äúoutside the box‚Äù thinking. Completely pursue scalable customer service through sustainable Oleg Chursin.",
    "lastmodified": "2023-02-16T14:01:19.89209217Z",
    "tags": null
  },
  "garden/content/posts/edward-snowden-privacy": {
    "title": "Edward Snowden About Privacy",
    "content": "\nArguing that you don't care about the right to privacy because you have nothing to hide is no different than saying you don't care about free speech because you have nothing to say.",
    "lastmodified": "2023-02-16T14:01:18.048093448Z",
    "tags": null
  },
  "garden/content/posts/sw-ssg-hugo-modules": {
    "title": "Hugo Modules Introduction",
    "content": "\n\nWhat are Hugo Modules and should you convert your Hugo site to be one?\n\nThe **Hugo Modules** feature¬†was added to Hugo back in [July 2019](https://github.com/gohugoio/hugo/releases/tag/v0.56.0). It enables collecting different pieces of your Hugo site source from different repositories, each piece is a _module_. \n\nModules can range from content to themes, providing one or more of the 7 component types defined in Hugo: \n* **static**\n* **content**\n* **layouts**\n* **data**\n* **assets**\n* **i18n**\n* and **archetypes**.\n\nYou can combine modules in any combination you like, and even mount directories from non-Hugo projects, forming a big, virtual union file system.\n\nYou need to install `go` in order to use Hugo Modules.\n\n## What can be a Hugo Module\n\nA Hugo module is a directory which may containe additional subdirectories like layouts, static, data etc. These subdirectories are referred to as *mounts* in Hugo modules.\n\n## Why Use Hugo Modules?\n\nVery basic use case of Hugo Modules is adding themes to the site. We don‚Äôt have to use git submodules or copy the theme files. This also enables versioning of the theme and pinning it to specific commit.\n\nSimilarly the files we copy over for shortcodes, static files etc. We just have to add the module and that‚Äôs it, Hugo takes care of downloading the files and using them. This simplifies the automated deployment workflows.\n\nWith the ability to use only a specific directory or a file from a module, Hugo modules opens up the door to a lot of possibilities and combinations.\n\n### Separation of reusable components\n\nThis benefit is same as that of using _git submodules_ for managing themes. You might have separate repositories for [adding ATOM feed](https://github.com/kaushalmodi/hugo-atom-feed), another for adding [search](https://github.com/kaushalmodi/hugo-search-fuse-js) which you would want to reuse on multiple sites, and you integrate those in your main site repo as submodules. Hugo modules allows you to do the same, and then more (recursive module updates, printing dependency graphs, etc.).\n\n### Mounts\n\nOnce a site repo is a Hugo module, it can start using the [**mounts** feature](https://gohugo.io/hugo-modules/configuration/#module-config-mounts).\n\nLet‚Äôs call the main Hugo site repository the *self module*. _Mounts_ are analogous to creating symbolic links¬†very similar to [unionfs](unionfs), it‚Äôs kind of like that. From any file or directory in the *self module* to **any** file or directory in one or more of the imported _modules_ (including the [self module](https://scripter.co/hugo-modules-getting-started/#org-radio--self-module)).\n\nAs an example, you might have a `README.md` in the root of your git repository. Using _mounts_, you can tell Hugo to use that same file as if it were `content/_index.md`¬† as follows\n\n```toml\n[module.mounts](module.mounts)\nsource = \"README.md\"\ntarget = \"content/_index.md\"\n```\n\nNow the same `README.md` serves as the content page for your site‚Äôs home page! ü§Ø\n\n## How to use Hugo Modules?\n\n### Install a recent version of `go`\n\nThe _Hugo Modules_ feature is powered by [Go Modules](https://github.com/golang/go/wiki/Modules). So even if you don‚Äôt develop anything in `go`, you need to have a recent version of `go` installed.\n\n```bash\nbrew install go\n```\n\n### Convert your Hugo site to a _Hugo Module_\n\nThe first and one time step is to initialize the site as a module. This can be done with `hugo mod init \u003cmodule path\u003e`.\n\n```shell\n# cd /path/to/your/site/repo/\nhugo mod init github.com/USER/PROJECT\n```\n\n\nHere, `github.com/USER/PROJECT` is your Go/Hugo module name. This name does not need to be your git remote repository URL, It can be any globally unique string you can think of.\n\n\u003e Note: The ‚Äúhttps://‚Äù prefix should not be included in the _[module name](https://scripter.co/hugo-modules-getting-started/#org-radio--module-name)_.\n\nIf all went well, a `go.mod` file will be created that will look like this:\n\n```go\nmodule github.com/USER/PROJECT\n\ngo 1.19\n```\n\nRight now, the `go.mod` only contains your site‚Äôs module name and the `go` version used to create it. Once other modules are added as dependencies, they will be added in this same file.\n\n\u003e  `go.mod` file is similar to the `.gitmodules` file when we use _git submodules_.\n\nOnce other module dependencies are added, a `go.sum` file would also be created containing the checksums of all your module dependencies.\n\n\u003e [!Note] Git Submodules\n\u003e \n\u003e If you are managing your Hugo themes via _git submodules_, don‚Äôt worry! Converting your site to a Hugo Module will not break anything.\n\n### Hugo Module dependencies\n\nTo add a module as a dependency of a site, we have to run the command `hugo mod get \u003cmodule path\u003e`. Then add an entry for the module in site configuration (in a config.yaml or config.toml file).\n\nThe `\u003cmodule path\u003e` is required to be a valid Go module path like `github.com/Lednerb/bilberry-hugo-theme/v3`. For local modules we don‚Äôt have to run the `get` command. We just need to keep them in the `themesDir` (default is `themes`) and add an entry for them.\n\nThe Go module path of the dependencies should resolve to a valid repository. It can be hosted anywhere like GitLab, GitHub etc. It may or may not have a go.mod file in it. _Local Hugo modules don‚Äôt need to have a go.mod file if they don‚Äôt have any dependencies._\n\nIf your site‚Äôs source code is not pushed to a public repository, the Go module path for the site can be a single word as well. _Note that if the module name does not resolve to a repository, it won‚Äôt be possible for others to use the site as a dependency._\n\n## Sample Setup\n\nThe following commands, will get a new Hugo site configured, and setup for modules\n\n```bash\ncd ~/Sites\nhugo new site damianflynn\ncd damianflynn\nrm -rf architypes/default.md\n```\n\nWith the base empty site created, we can publish this to GitHub\n```bash\ngit init\ngit add -A :/\ngit commit -m \"feat: new hugo site\"\ngit branch -M main\ngit remote add origin https://github.com/DamianFlynn/hugo.git\ngit push -u origin main\n```\n\nNow, time to convert the site into a Hugo Module\n\n```bash\nhugo mod init github.com/DamianFlynn/hugo\n```\n\nWith the site now functioning, we can proceed with a look at [posts/sw-ssg-hugo-modules-theme](posts/sw-ssg-hugo-modules-theme).",
    "lastmodified": "2023-02-16T14:01:19.896092167Z",
    "tags": null
  },
  "garden/content/posts/sw-ssg-hugo-modules-theme": {
    "title": "Theming Hugo with Module",
    "content": "\n\nTo utilize modules in Hugo for our theme, we first must ensure that our site supports [Hugo Modules](posts/sw-ssg-hugo-modules).\n\n\u003e You can quickly verify that you site is configured for Hugo Modules, as it should contain a  `go.mod` file in the repository root.\n\n## Import the `theme` module\n\nThe concept of a Hugo *theme* has been superseded with the concept of *modules*, with the main difference that the former will allow you to build your site entirely, while the latter might implement only some modular features like enabling the ATOM feed, or adding a search to your website.\n\nImporting a module as a theme will typically follow the convention:\n\nUpdate the sites `config.toml` file with the below content, so that it imports the [`hugo-bilberry-theme`](https://github.com/DamianFlynn/hugo-bilberry-theme)¬† \n    \n```toml\n[module]\n\t[module.imports](module.imports)\n\t\tpath = \"github.com/Lednerb/bilberry-hugo-theme/v3\"\n```\n\nIn this case, the path `github.com/Lednerb/bilberry-hugo-theme/v3` references the Github repo hosting the theme to be used.\n\n\u003e [!Note] Hugo Themes as Modules\n\u003e \n\u003e It‚Äôs possible to take any Hugo theme git repo and import that as a Hugo Module even if that repo isn‚Äôt actually one i.e. doesn‚Äôt have a `go.mod`. But it‚Äôs recommended that the theme be a proper Hugo Module so that you have better dependency tracking between your site and the theme.\n\n\n### Testing\n\nCreate `content/testing.md`. This step is optional and is only so that your test site as some content.\n\n```md\n---\ntitle = \"Hello\"\ntype = Article\n---\n# Hey!\n\nWe have a sample article posted\n``` \n\nThat‚Äôs it! Now run the Hugo server with the command `hugo server` and look at your site running on localhost.\n\nJust to summerise\n-   Did you need to manually clone any theme? **No**\n-   Would you need to deal with the `.gitmodules` file? **No**\n\n## Tidy up the modules\n\nFinally, run [`hugo mod tidy`](https://gohugo.io/commands/hugo_mod_tidy/) to clean up the `go.mod` and update or generate the `go.sum` file. These files will track the module dependencies for your site.\n\n-   The `go.mod` contains the direct module dependencies for your site.\n-   The `go.sum` contains the versions and hashes of all the direct **and indirect** dependencies\n  \nJust as you added a theme as a Hugo Module to your site, it‚Äôs possible that that theme is depending on other Hugo Modules for your site.\n\n\u003e [!Important] GO Modules\n\u003e \n\u003e You should ensure that both the `go.mod` and `go.sum` are not excluded from your respoitory, for example due to a `.gitignore` inclusion.\n\nCurrently you `go.mod` will be similar to the following:\n\n```go\nmodule github.com/DamianFlynn/hugo\n\ngo 1.19\n\nrequire github.com/Lednerb/bilberry-hugo-theme/v3 v3.14.0 // indirect\n```\n\nwhile, you now also should have a new `go.sum` which again should be similar to this:\n\n```text\ngithub.com/Lednerb/bilberry-hugo-theme/v3 v3.14.0 h1:4kahS1hSN/txeL2J9MzsEqidz52N0Fltf2iwE2Jmbn0=\ngithub.com/Lednerb/bilberry-hugo-theme/v3 v3.14.0/go.mod h1:ERTLq/0yIBb0jN0Dh+w5G4wCp9TrB0JY86+Zh+26Dkg=\n```\n\n## Updating the theme¬†\n\nIssing the command will instruct our Hugo module to update all the modules it depends on recursivly.\n\n```bash\nhugo mod get -u ./..\n```\n\nIf you wish to target a specif module only, for example our theme, then we would issue the following command\n\n```shell\nhugo mod get -u github.com/DamianFlynn/hugo\n```\n\nAnd, if you wish to reference a specific tag or commit in [git](git) with the following format\n\n```bash\nhugo mod get \u003cmodule path\u003e@\u003cgit ref\u003e\n```\n\n\u003e [!info] Dependency Graph\n\u003e\n\u003e If you have a theme added as a Hugo Module, which depends on other Hugo Modules, it‚Äôs often helpful to know the dependency graph. You can do that by running:\n\u003e ```shell\n\u003e  hugo mod graph\n\u003e ```\n\u003e \n\u003e Which in our current configuration, appears as follows\n\u003e ```text\n\u003e github.com/DamianFlynn/hugo github.com/Lednerb/bilberry-hugo-theme/v3@v3.14.0\n\u003e ```",
    "lastmodified": "2023-02-16T14:01:19.896092167Z",
    "tags": null
  },
  "garden/content/posts/sw-ssg-hugo-structure": {
    "title": "Structuring Repositories For Hugo",
    "content": "\n## Obsidian Vault: repository `DamianFlynn/Cranium`\n\nThis repo is my Obsidian Vault. It is private and keeps an constant backup of all my notes.\n\n### Plugin: `obsidian-git`\nThere are a number of Plug-ins added to my vault, but core to this flow is `obsidian-git` which is configured to backup with the following configuration settings\n\n```json\n{\n\t\"commitMessage\": \"vault backup: {{date}}\",\n\t\"autoCommitMessage\": \"vault backup: {{date}}\",\n\t\"commitDateFormat\": \"YYYY-MM-DD HH:mm:ss\",\n\t\"autoSaveInterval\": 5,\n\t\"autoPushInterval\": 0,\n\t\"autoPullInterval\": 5,\n\t\"autoPullOnBoot\": true,\n\t\"disablePush\": false,\n\t\"pullBeforePush\": true,\n\t\"disablePopups\": false,\n\t\"listChangedFilesInMessageBody\": true,\n\t\"showStatusBar\": true,\n\t\"updateSubmodules\": false,\n\t\"syncMethod\": \"merge\",\n\t\"customMessageOnAutoBackup\": false,\n\t\"autoBackupAfterFileChange\": true,\n\t\"treeStructure\": false,\n\t\"refreshSourceControl\": true,\n\t\"basePath\": \"\",\n\t\"differentIntervalCommitAndPush\": false,\n\t\"changedFilesInStatusBar\": false,\n\t\"showedMobileNotice\": true,\n\t\"refreshSourceControlTimer\": 7000,\n\t\"showBranchStatusBar\": true,\n\t\"setLastSaveToLastCommit\": false\n}\n```\n\n### Workflow: '.github/workflows/'\nGit action on push triggers parser to prepare the content which will be made public and posts to Garden repo, builds index and backlinks.\n\nAs I am only making a subset of my Craium repository public in the Garden repoisitory, currently this is based on content I place in the `/share` folder of my vault.\n\nThis workflow currently looks \n```yaml\nname: Prepare Public Content\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.workflow }}-${{ github.ref }}\n\n    steps:\n      - name: Checkout Garden repo\n        uses: actions/checkout@v3\n        with:\n          repository: DamianFlynn/garden\n          path: garden\n          token: ${{secrets.API_TOKEN_GITHUB}}\n\n      - name: Prune the Garden\n        run: |\n          cp garden/go.mod go.mod.stash\n          cd garden\n          find . -mindepth 1 -not -regex \"^\\./\\.git.*\" \n          find . -mindepth 1 -not -regex \"^\\./\\.git.*\" -delete\n          cd ..\n          cp go.mod.stash garden/go.mod\n          mkdir ./garden/content -p\n          mkdir ./garden/content/posts -p\n          mkdir ./garden/assets/indices -p\n          touch ./garden/assets/indices/contentIndex.json\n          touch ./garden/assets/indices/linkIndex.json\n          mkdir ./garden/static -p\n          touch ./garden/static/linkmap\n\n      - name: Checkout Cranium repo\n        uses: actions/checkout@v3\n        with:\n          path: obsidian\n\n      - name: Export Obsidian Notes\n        id: obsidian-export\n        uses: DamianFlynn/py-obsidian-parser@main\n        with:\n          hugo-content-dir: ./garden/content/posts\n          obsidian-vault-dir: obsidian\n          export-dir: share\n        continue-on-error: true\n\n      - name: Housekeeping\n        run: |\n          rm -rf obsidian\n\n      - name: Link and Index Builder\n        run: |\n          export PATH=$PATH:$(go env GOPATH)/bin\n          go install github.com/jackyzha0/hugo-obsidian@latest\n          hugo-obsidian -input=./garden/content -output=./garden/assets/indices -index -root=./garden\n\n      - name: Publish Content\n        shell: bash\n        run: |\n          cd garden\n          git config --local user.name \"github-actions[bot]\"\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git add -A\n          git commit -m \"Content update\"\n          git push https://$USERNAME:$REPO_KEY@github.com/DamianFlynn/garden.git\n        env:\n          REPO_KEY: ${{secrets.API_TOKEN_GITHUB}}\n          USERNAME: github-actions[bot]\n        continue-on-error: true\n```\n\n\n## Public Content: repository `DamianFlynn/garden`\n \nRepo is configure as a go module\nNo git action currently, considering a Git action on push to send webhook to Hugo repo to trigger rebuild¬†\n\n## Hugo: partials repository   \n\nHugo partials repo (module) contains customising for the partials and statics\n\n## Hugo Site repository `DamianFlynn/hugo`\n\n  \n\nHugo repo (self module) unions¬†\n\nthe garden repo as the content type source.¬†\n\nThe theme repo as the theme type source\n\nThe partials repo as the customisation¬†\n\n  \n\nGit PR flow triggers a new environment per PR with the latest garden and partials content for preflight testing",
    "lastmodified": "2023-02-16T14:01:18.048093448Z",
    "tags": null
  }
}